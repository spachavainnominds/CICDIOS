name: iOS Build, TestFlight & Firebase Distribution

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1

      - name: Detect Xcode project directory
        id: detect_project
        run: |
          project_path=$(find . -name "*.xcodeproj" -print -quit | xargs dirname)
          echo "project_path=${project_path#./}" >> $GITHUB_OUTPUT

      - name: Add GoogleService-Info.plist
        run: |
          echo "${{ secrets.IOS_FIREBASE_PLIST }}" | base64 --decode > "${{ steps.detect_project.outputs.project_path }}/GoogleService-Info.plist"

      - name: Install Fastlane
        run: gem install fastlane

      - name: Install Dependencies
        run: bundle install || true

      - name: Detect Xcode project name and set Info.plist path
        id: plist_path
        run: |
            project_path=$(find . -name "*.xcodeproj" -print -quit)
            app_name=$(basename "$project_path" .xcodeproj)
            plist_path="$app_name/SupportingFiles/Info.plist"
            echo "plist_path=$plist_path" >> $GITHUB_OUTPUT
            echo "Detected plist path: $plist_path"
            cat "$plist_path"
            if [ -f "$plist_path" ]; then
                cat "$plist_path"
            else
                echo "❌ Info.plist not found at: $plist_path"
            exit 1
            fi

      - name: Print Info.plist contents
        run: |
            cat "${plist_path}"
    
      - name: Extract current iOS build number
        id: ios_version
        run: |
              build_number=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "${{ steps.plist_path.outputs.plist_path }}")
              echo "build_number=$build_number" >> $GITHUB_OUTPUT

      - name: Find previous build number commit
        id: last_ios_build_commit
        run: |
              last_commit=$(git log -G'CURRENT_PROJECT_VERSION' -n 1 --pretty=format:"%H" -- "${{ steps.plist_path.outputs.plist_path }}")
              echo "last_commit=$last_commit" >> $GITHUB_OUTPUT

      - name: Generate iOS release notes
        id: ios_release_notes
        run: |
          notes=$(git log ${{ steps.last_ios_build_commit.outputs.last_commit }}..HEAD --pretty=format:"- %s")
          echo "IOS_RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build & Deploy using Fastlane
        run: fastlane release
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Distribute iOS build to Firebase
        run: |
          firebase appdistribution:distribute path/to/your.ipa \
            --app "YOUR_IOS_FIREBASE_APP_ID" \
            --release-notes "$IOS_RELEASE_NOTES" \
            --groups "testers"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_CLI_TOKEN }}
